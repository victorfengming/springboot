{"./":{"url":"./","title":"Introduction","keywords":"","body":"IntroductionIntroduction 声明 【狂神说Java】SpringBoot最新教程IDEA版通俗易懂 秦疆老师Java系列课程之Springboot系列 4天课程的合集，从初识SpringBoot，然后进入web开发，原理探究，再到数据库连接，然后集成一些常用的框架，由易到难，层层递进，无论你是新手还是老手都能够有所收获，录得不好，请不要吐槽！ 狂神说Java系列，努力打造通俗易懂的教程 QQ交流群 : 664386224 最后 整理不易,请给小编一个star 更多文档链接:点我查看 友情链接 github:https://github.com/victorfengming 码云:https://gitee.com/victorfengming csdn:https://blog.csdn.net/qq_40223983 博客园:https://www.cnblogs.com/victorfengming/ 开源中国:https://my.oschina.net/victorfengming 其他相关推荐: Golang,Google开发的一种静态强类型、编译型语言 Python,解释型、面向对象、动态数据类型的高级程序设计语言 Java,应用最广泛的,面向对象的高级程序设计语言 前端,HTML+CSS+JS mybatis,支持定制化SQL,存储过程以及高级映射的优秀的持久层框架 django,Python驱动的一个开源模型-视图-控制器风格的Web框架 beego,Go应用的HTTP框架,用来快速开发API、Web及后端服务 flask,使用 Python 编写的轻量级 Web 应用框架 jenkins,Jenkins是一个开源的,基于Java开发的一种持续集成工具 mysql,最流行的关系型数据库管理系统 nosql,非关系型数据库是对关系型数据库的一种补充 redis,C开发的,高性能,内存,键值对儿nosql数据库 pyqt5, 用来创建Python GUI应用程序的工具包 springboot,简化新Spring应用的初始搭建以及开发过程的新框架 Docker,基于Go的开源的应用容器引擎 Data Science,Python大数据相关,人工智能数据分析基础 elasticsearch,RESTful 风格的分布式开源搜索和分析引擎 阿里巴巴,阿里巴巴中文站架构设计实践(何崚).pdf.pdf)new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-23 14:40:15 "},"01_前期准备/01-SpringBoot-如何学.html":{"url":"01_前期准备/01-SpringBoot-如何学.html","title":"如何学","keywords":"","body":"微服务阶段学习大纲阶段6spirngbootspringcloud微服务阶段 javase: OOP mysql:jdbc,持久化 html+css+js+jq+框架:视图层(我们做的并不好,框架不熟练,CSS不好) javaweb:独立开发mvc三层架构的网站:原始 ssm:进阶 ,框架封装,简化了我们的开发流程,配置也开始较为复杂; war包:tomcat运行 spring在简化:SpringBoot-jar包:内嵌tomcat; 微服务架构 服务越来越多​ springcloud 学习大纲 springcloud 在加上linux和jvm 所有的简化背后都需要集成 阶段6 spirngboot 是什么 配置如何编写yaml 自动装配原理:重要,谈资 集成web开发:业务的核心 集成数据库druid 分布式开发:Dubbo+zookeeper swagger:接口文档 任务调度:异步任务,邮件发送 SpringSecurity:安全 Shiro springcloud 微服务 springcloud入门 Restful风格 Eureka Ribbon Feign HyStix Zuul路由网管 SpringCloud config : gitnew Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"01_前期准备/02-SpringBoot-是什么.html":{"url":"01_前期准备/02-SpringBoot-是什么.html","title":"是什么","keywords":"","body":"什么是SpringBoot什么是SpringSpring是如何简化开发的什么是Spring Boot什么是SpringBoot Spring是一个开源框架' Spring是为了解决企业级应用开发的复杂性而创建的,简化开发 Springboot基于Spring开发,Spring Boot本身并不 什么是Spring spring是一个开源框架,为了解决企业级应用开发的复杂性而创建的,简化开发 Spring是如何简化开发的 为了降低Java开发的复杂性,Spring采用了以下4种关键策略: 基于POJO的轻量级和最小浸入性编程 通过IOC,依赖注入(DI)和面向接口编程实现松耦合 基于切面(AOP)和惯例进行声明式编程; 通过切面和模板减少样式代码; 什么是Spring Boot 学过javaweb的同学都知道,开发一个web应用,从最初开始接触servlet结合Tomcat,跑出一个Helloworld程序,是要经历特别多的步骤;后来就有了框架Struts,在后来是Spring MVC,到了现在的Spring Boot,过一两年又会有其他web框架出现;不知道你们有没有经历过框架不断的演进,然后自己开发项目所有的技术也在不断的变化,改造,反正我是都经历过了,哈哈. 言归正传,什么是Spring Boot呢,就是一个javaweb的开发框架,和Spring MVC类似,对比其他javaweb框架的好处,官方说是简化开发,约定大于配置,you can just run,能迅速的开发web应用,几行代码开发一个http接口. 所有的技术框架的发展似乎都遵循了一条主线规律:从一个复杂应用场景 衍生一种规范框架,人们只需要进行各种配置而不需要自己去实现它,这时候强大的配置功能成了优点;发展到了一定程度之后,人们根据实际生产应用情况,选取其中实用功能和设计精华,重构出一些轻量级的框架;之后为了提高开发效率 嫌弃原先的各类配置过于麻烦 于是开始提倡\"约定大于配置\" 进而衍生出一些一站式解决方案. 是的,这就是java企业级应用-> J2EE -> Spring -> Spring boot的过程 随着Spring不断的发展,涉及的领域越来越多,项目整合开发需要配合各种各样的文件,慢慢变得不那么易用简单,违背了最初的理念,甚至人称配置地狱.Spring Boot 正是这样的一个背景下被抽象出来的开发框架,目的为了让大家更容易的使用Spring , 更容易的集成各种常用的中间件,开源软件; SpirngBoot 基于Spring 开发,Spirng Boot 本省并不提供Spirng框架的核心特性以及扩展功能,只是用于快速,敏捷地开发新一代基于Spring 框架的应用程序.也就是说,它并不是用来替代Spring的解决方案,而是和Spring框架紧密结合用于提升Spring开发者体验的工具.Spring Boot以约定大于配置的核心思想,默认帮我们进行了很多设置,多数Spring Boot 应用只需要很少的Spring配置.同时它集成了大量常用的第三方库配置(例如Redis,MongoDB,Jpa,RabbitMQ,Quartz等等),Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用. 简单来说就是SpringBoot其实不是什么新的框架,它默认配置了很多框架的使用方式,就像Maven整合了所有的jar包,spirng boot 整合了所有的框架. spring boot 出生名门,从一开始就站在一个比较高的起点,又经过这几年的发展,生态足够完善,Spring Boot已经当之无愧称为Java领域最热门的技术. Spring Boot的主要优点: 为所有Spring开发者更快的入门 开箱即用,提供各种默认配置来简化项目配置 内嵌式容器简化web项目 没有冗余代码生成和XML配置的要求 程序 = 数据结构+算法(集合框架) -> 程序员 程序 = 面向对象 + 框架 -> 码农 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"01_前期准备/03-SpringBoot-第一个应用.html":{"url":"01_前期准备/03-SpringBoot-第一个应用.html","title":"第一个应用","keywords":"","body":"微服务微服务 MVC三层架构 MVVM 微服务架构 业务: service:userService: ===> 模块! springmvc,controller ==> 提供接口 http:rpc 用户下单:controller! 1S 仓库冻结:资金冻结;验证:购买成功,仓库数量减少,仓库解冻,资金解冻 10S 高内聚,低耦合 8k-13K 软实力 你主导面试官 13K : 聊天 面试官主导你 8Knew Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"01_前期准备/04-SpringBoot-helloworld程序.html":{"url":"01_前期准备/04-SpringBoot-helloworld程序.html","title":"helloworld程序","keywords":"","body":"到底多么简单 jdk1.8 maven3.6.1 springboot:最新版 IDEA 一般直接在idea中创建就OK package com.kuang.springboot01helloworld.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody; /** * @author victor * @site https://victorfengming.github.io/ * @company XDL * @project springboot-01-helloworld * @package com.kuang.springboot01helloworld.controller * @created 2020-07-24 14:17 * @function \"\" */ /* * * Spring boot 热部署 * */ @Controller @RequestMapping(\"/hello\") public class HelloController { @RequestMapping(\"/hello\") @ResponseBody public String hello() { return \"HEllow\"; } } 程序入口 package com.kuang.springboot01helloworld; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Springboot01HelloworldApplication { public static void main(String[] args) { SpringApplication.run(Springboot01HelloworldApplication.class, args); } } 配置文件 4.0.0 com.kuang springboot-01-helloworld 0.0.1-SNAPSHOT springboot-01-helloworld victor first project 1.8 UTF-8 UTF-8 2.3.0.RELEASE org.springframework.boot spring-boot-starter-web org.springframework.boot spring-boot-starter-test test org.junit.vintage junit-vintage-engine org.springframework.boot spring-boot-dependencies ${spring-boot.version} pom import org.apache.maven.plugins maven-compiler-plugin 1.8 1.8 UTF-8 org.springframework.boot spring-boot-maven-plugin new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"01_前期准备/05-SpringBoot-IDEA创建彩蛋.html":{"url":"01_前期准备/05-SpringBoot-IDEA创建彩蛋.html","title":"IDEA创建彩蛋","keywords":"","body":"SpringBoot使用IDEA创建项目SpringBoot使用IDEA创建项目 选择springboot,选择java版本,maven项目 然后 然后完成了就 现在就是这样了 删除多余的文件 现在直接启动 现在运行完就结束了 怎么能不结束呢,是不是需要导入web依赖啊 在启动 现在tomcat就被继承进来了 我们写一个controller package com.kuang.springboot01helloworld.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.ResponseBody; /** * @author victor * @site https://victorfengming.github.io/ * @company XDL * @project springboot-01-helloworld * @package com.kuang.springboot01helloworld.controller * @created 2020-07-24 14:17 * @function \"\" */ /* * * Spring boot 热部署 * */ @Controller @RequestMapping(\"/hello\") public class HelloController { @RequestMapping(\"/hello\") @ResponseBody public String hello() { return \"helloworld!!!哦哦哦\"; } } 重新启动 在配置文件中更改项目的端口号 编辑application.properties文件: spring.application.name=springboot-01-helloworld management.endpoints.jmx.exposure.include=* management.endpoints.web.exposure.include=* management.endpoint.health.show-details=always # spring cloud access&secret config # 可以访问如下地址查看: https://usercenter.console.aliyun.com/#/manage/ak alibaba.cloud.access-key=**** alibaba.cloud.secret-key=**** # 应用服务 WEB 访问端口 server.port=8180 # Actuator Web 访问端口 management.server.port=8081 我们可以自定义banner springboot banner 在线生成 比如: www.bootschool.net/ascii-art 我们找一个图形,然后编辑banner.txt文件: _.-=\"_- _ _.-=\" _- | ||\"\"\"\"\"\"\"---._______ __.. ___.===\"\"\"\"-.______-,,,,,,,,,,,,`-''----\" \"\"\"\"\" \"\"\"\"\" __' __.--\"\" __ ,' spring victor o \\ __ [__| __-\"\"=======.--\"\" \"\"--.=================================.--\"\" \"\"--.=======: ] [w] : / \\ : |========================| : / \\ : [w] : V___________:| |: |========================| :| |: _-\" V__________: \\ / :_|=======================/_____: \\ / :__-\" -----------' \"-____-\" `-------------------------------' \"-____-\" 重新启动运行 就成了 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"02_基础原理/06-SpringBoot-自动装配原理.html":{"url":"02_基础原理/06-SpringBoot-自动装配原理.html","title":"自动装配原理","keywords":"","body":"自动装配原理 SpringBoot自动装配原理 SpringBoot 在spirngboot 中的依赖是存储在pom.xml 这个pom.xml在父工程中 pom.xml spring-boot-dependencies:核心依赖在父工程中 我们在写或者引入一些SpringBoot依赖的时候,不需要指定版本,就因为有这些版本仓库 主程序 package com.kuang.springboot01helloworld; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class Springboot01HelloworldApplication { public static void main(String[] args) { // 将spirngboot应用启动 SpringApplication.run(Springboot01HelloworldApplication.class, args); } } 注解 获取获选配置 META-INF/spring.factories : 自动配置的核心文件 所有资源加载到配置类中 properties properties = PropertiesLoaderUtils.loadProperties(resources); 画一个图 结论:spirngboot所有的自动配置都是在启动的时候扫描并加载:spring.factories所有的自动配置类都在这里面,但是不一定生效,要判断条件是否成立,只要导入了对应start,就有对应的启动器,有了启动器,我们自动装配就会生效,然后就配置成功! new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"02_基础原理/07-SpringBoot-主启动类怎么运行.html":{"url":"02_基础原理/07-SpringBoot-主启动类怎么运行.html","title":"主启动类怎么运行","keywords":"","body":"SpringBoot主启动类怎么运行SpringBoot主启动类怎么运行 然后 这些是原理部分,里面不需要我们来实现 关于SpringBoot,谈谈你的理解 自动装配 run() 全面接管SpringMVC的配置,实操. new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"02_基础原理/08-SpringBoot-yaml语法.html":{"url":"02_基础原理/08-SpringBoot-yaml语法.html","title":"yaml语法","keywords":"","body":"SpringBoot中yaml语法SpringBoot中yaml语法 在springboot中,配置文件可以是application.Properties文件 也可以是官方推荐的yaml类型的配置文件 原来的Properties 现在这么写 他这个对于空格十分严格 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"02_基础原理/09-SpringBoot-给属性赋值的几种方式.html":{"url":"02_基础原理/09-SpringBoot-给属性赋值的几种方式.html","title":"给属性赋值的几种方式","keywords":"","body":"给实体类赋值 我们的类和配置文件直接关联着,我们使用的是@ConfigurationProperties的方式,还有一种方式是使用@Value 这个使用起来并不友好! 我们需要为每个属性单独注解赋值,比较麻烦;我们来看个功能对比图 然而,这个yaml就厉害了 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"02_基础原理/10-SpringBoot-JSR303校验.html":{"url":"02_基础原理/10-SpringBoot-JSR303校验.html","title":"JSR303校验","keywords":"","body":"SpringBoot JSR303 校验SpringBoot JSR303 校验 JSR-303校验 里面有很多注解 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"03_各种配置/11-SpringBoot-多环境配置文件位置.html":{"url":"03_各种配置/11-SpringBoot-多环境配置文件位置.html","title":"多环境配置文件位置","keywords":"","body":"配置文件的优先级 默认的优先级是最低的 多环境配置 可以手动选择激活哪个配置文件 application-test.Properties application-dev.Properties开发环境 要是yaml,就甭分这么多文件了 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"03_各种配置/12-SpringBoot-自动配置原理再理解.html":{"url":"03_各种配置/12-SpringBoot-自动配置原理再理解.html","title":"自动配置原理再理解","keywords":"","body":"自动配置原理 配置文件里面到底能写啊什么东西 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"03_各种配置/13-SpringBoot-web开发探究.html":{"url":"03_各种配置/13-SpringBoot-web开发探究.html","title":"web开发探究","keywords":"","body":"SpringWeb开发SpringWeb开发 jar:webapp! 自动装配 创建应用,选择模块 springboot到底帮我们配置了什么?我们能不能修改?能修改哪些东西?能不能扩展? xxxxAutoConfiguration.. 向容器中自动配置组件 xxxxProperties:自动配置类,装配配置文件中自定义的一些内容 要解决的问题 导入静态资源,..... 首页定制 jsp, 页面需要模板引擎 Thymeleaf 装配扩展SpringMVC 增删改查 拦截器 国际化! new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"03_各种配置/14-SpringBoot-静态资源导入探究.html":{"url":"03_各种配置/14-SpringBoot-静态资源导入探究.html","title":"静态资源导入探究","keywords":"","body":"导入静态资源 导入静态资源 什么是webjars 他可以以maven的方式引入JQuery org.webjars jquery 3.4.1 这样就能通过jar包的形式引入jquery了 webjars就相当于下面的多级目录 这3个目录中,resources>static>public 优先级排名 总结: 在SpringBoot中,我们可以使用以下方式处理静态资源 webjars localhost:8080/webjars/ public,static,/** ,resources `localhost:8080/ 优先级: resources>static(默认)>public new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"03_各种配置/15-SpringBoot-首页和图标定制.html":{"url":"03_各种配置/15-SpringBoot-首页和图标定制.html","title":"首页和图标定制","keywords":"","body":"首页如何定制 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"03_各种配置/16-SpringBoot-thymeleaf模板引擎.html":{"url":"03_各种配置/16-SpringBoot-thymeleaf模板引擎.html","title":"thymeleaf模板引擎","keywords":"","body":" 模板引擎我们以前是JSP 先导入thymeleaf org.thymeleaf thymeleaf-spring5 org.thymeleaf.extras thymeleaf-extras-java8time 然后 在页面中创建一个html文件 编辑test.html Document 用于测试此事 在Controller中配置 package com.kuang.controller; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; /** * @author victor * @site https://victorfengming.github.io/ * @company XDL * @project springboot-03-web * @package com.kuang.controller * @created 2020-08-06 15:29 * @function \"\" */ // 在Templates目录下的所有页面这能通过Controller来跳转! // 这个需要模板引擎的支持 thymeleaf @Controller public class IndexController { @RequestMapping(\"/test\") public String test() { return \"test\"; } } 在返回的\"test\",然后thymeleaf会有一定的规则进行匹配 然后就找到页面了 重新启动 在看页面 就成了 模板引擎 结论: 只需要使用thymeleaf,只需要导入对应的依赖就可以了! 我们将html页面放在我们的Template目录下即可 语法 判断 显示 取值 首先想要使用,需要导入一个约束 我们来传递一个数据试试 早期没人教的时候,都是看源码学习的 1在Controller里面这样写 package com.kuang.controller; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping; /** * @author victor * @site https://victorfengming.github.io/ * @company XDL * @project springboot-03-web * @package com.kuang.controller * @created 2020-08-06 15:29 * @function \"\" */ // 在Templates目录下的所有页面这能通过Controller来跳转! // 这个需要模板引擎的支持 thymeleaf @Controller public class IndexController { @RequestMapping(\"/test\") public String test(Model model) { model.addAttribute(\"msg\", \"hello,springboot\"); return \"test\"; } } 2在test.html中 Document 3在页面中康康 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"03_各种配置/17-SpringBoot-Thymeleaf语法.html":{"url":"03_各种配置/17-SpringBoot-Thymeleaf语法.html","title":"Thymeleaf语法","keywords":"","body":"thymeleaf语法thymeleaf语法 在HTML中不要写if else 全部写成 3目运算符这样 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:11:16 "},"03_各种配置/18-SpringBoot-MVC配置原理.html":{"url":"03_各种配置/18-SpringBoot-MVC配置原理.html","title":"MVC配置原理","keywords":"","body":" 创建一个 package com.kuang.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.View; import org.springframework.web.servlet.ViewResolver; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.Locale; // 扩展springmvc DispatcherServlet @Configuration public class MyMvcConfig implements WebMvcConfigurer { // public interface ViewResolver 实现了视图解析器的类,我们就可以把它看做视图解析器 @Bean public ViewResolver myViewResolver() { return new MyViewResolver(); } // 自定义了一个自己的视图解析器MyViewResolver // 我们自己写了一个解析器,并且装配到bean上面 public static class MyViewResolver implements ViewResolver { @Override public View resolveViewName(String viewName, Locale locale) throws Exception { return null; } } } new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:14:25 "},"03_各种配置/19-SpringBoot-扩展MVC.html":{"url":"03_各种配置/19-SpringBoot-扩展MVC.html","title":"扩展MVC","keywords":"","body":"扩展mvc扩展mvc 在springboot中,有非常多的xxxConfiguration 帮助 我们进行拓展,只要看见了这个东西,我们就要注意了new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:20 "},"04_员工管理系统/20-SpringBoot-员工管理系统-首页实现.html":{"url":"04_员工管理系统/20-SpringBoot-员工管理系统-首页实现.html","title":"首页实现","keywords":"","body":"其实springboot项目主流是前后端分离的，因此之前mvc项目里的model模型到这里就变成了POJO目录。 POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称。 使用POJO名称是为了避免和EJB混淆起来, 而且简称比较直接. 其中有一些属性及其getter setter方法的类,没有业务逻辑，有时可以作为VO(value -object)或dto(Data Transform Object)来使用.当然,如果你有一个简单的运算属性也是可以的,但不允许有业务方法,也不能携带有connection之类的方法。 POJO与javabean的区别 POJO 和JavaBean是我们常见的两个关键字，一般容易混淆，POJO全称是Plain Ordinary Java Object / Pure Old Java Object，中文可以翻译成：普通Java类，具有一部分getter/setter方法的那种类就可以称作POJO，但是JavaBean则比 POJO复杂很多， Java Bean 是可复用的组件，对 Java Bean 并没有严格的规范，理论上讲，任何一个 Java 类都可以是一个 Bean 。但通常情况下，由于 Java Bean 是被容器所创建（如 Tomcat) 的，所以 Java Bean 应具有一个无参的构造器，另外，通常 Java Bean 还要实现 Serializable 接口用于实现 Bean 的持久性。 Java Bean 是不能被跨进程访问的。JavaBean是一种组件技术，就好像你做了一个扳子，而这个扳子会在很多地方被拿去用，这个扳子也提供多种功能(你可以拿这个扳子扳、锤、撬等等)，而这个扳子就是一个组件。一般在web应用程序中建立一个数据库的映射对象时，我们只能称它为POJO。POJO(Plain Old Java Object)这个名字用来强调它是一个普通java对象，而不是一个特殊的对象，其主要用来指代那些没有遵从特定的Java对象模型、约定或框架（如EJB）的Java对象。理想地讲，一个POJO是一个不受任何限制的Java对象（除了Java语言规范） 开始操作 先引入静态资源 然后创建pojo类和config类 department.java package com.kuang.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; /** * @author victor * @site https://victorfengming.github.io/ * @company XDL * @project springboot-demo-01 * @package com.kuang.pojo * @created 2020-08-06 19:59 * @function \"\" */ // 部门表 @Data @AllArgsConstructor @NoArgsConstructor public class Department { private Integer id; private String departmentName; } employee.java package com.kuang.pojo; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import java.util.Date; /** * @author victor * @site https://victorfengming.github.io/ * @company XDL * @project springboot-demo-01 * @package com.kuang.pojo * @created 2020-08-06 20:03 * @function \"\" * pojo -==- * Plain Ordinary Java Object */ // 员工表 @Data @AllArgsConstructor @NoArgsConstructor public class Employee { private Integer id; private String lastName; private String email; private Integer gender; // 0 nv 1男 private Department department; private Date birth; } MyMvcConfig.java package com.kuang.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.View; import org.springframework.web.servlet.ViewResolver; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.Locale; // 扩展springmvc DispatcherServlet @Configuration public class MyMvcConfig implements WebMvcConfigurer { // public interface ViewResolver 实现了视图解析器的类,我们就可以把它看做视图解析器 @Bean public ViewResolver myViewResolver() { return new MyViewResolver(); } // 自定义了一个自己的视图解析器MyViewResolver // 我们自己写了一个解析器,并且装配到bean上面 public static class MyViewResolver implements ViewResolver { @Override public View resolveViewName(String viewName, Locale locale) throws Exception { return null; } } } pom.xml 4.0.0 org.springframework.boot spring-boot-starter-parent 2.3.2.RELEASE com.kuang springboot-demo-01 0.0.1-SNAPSHOT springboot-demo-01 Demo project for Spring Boot 1.8 org.thymeleaf thymeleaf-spring5 org.thymeleaf.extras thymeleaf-extras-java8time org.springframework.boot spring-boot-starter-web org.projectlombok lombok org.springframework.boot spring-boot-starter-test test org.junit.vintage junit-vintage-engine org.springframework.boot spring-boot-maven-plugin 再创建一个dao包 department.dao文件 package com.kuang.dao; import com.kuang.pojo.Department; import org.springframework.context.annotation.Bean; import org.springframework.stereotype.Repository; import java.util.Collection; import java.util.HashMap; import java.util.Map; // 部门表 @Repository public class DepartmentDao { // 模拟数据库中的数据 private static Map departments = null; static { // 创建一个部分表 departments = new HashMap(); departments.put(101, new Department(101,\"教学部\")); departments.put(102, new Department(102,\"市场部\")); departments.put(103, new Department(103,\"教研部\")); departments.put(104, new Department(104,\"运营部\")); departments.put(105, new Department(105,\"后勤部\")); } // 获得所有部门信息 public Collection getDepartments() { return departments.values(); } // 通过id得到部门 public Department getDepartmentById(Integer id) { return departments.get(id); } } EmployeeDao.java文件 package com.kuang.dao; import com.kuang.pojo.Department; import com.kuang.pojo.Employee; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import java.util.Collection; import java.util.HashMap; import java.util.Map; /** * @author victor * @site https://victorfengming.github.io/ * @company XDL * @project springboot-demo-01 * @package com.kuang.dao * @created 2020-08-06 20:24 * @function \"\" */ // 员工的Dao @Repository public class EmployeeDao { // 模拟数据库中的数据 private static Map employees = null; // 员工所属的部门 @Autowired private DepartmentDao departmentDao; static { // 创建一个员工表 employees = new HashMap(); employees.put(1001, new Employee(1001,\"AA\",\"510510280@qq.com\",1,new Department(105, \"后勤部\"))); employees.put(1002, new Employee(1002,\"BB\",\"410510280@qq.com\",0,new Department(102, \"市场部\"))); employees.put(1003, new Employee(1003,\"vi\",\"310510280@qq.com\",0,new Department(105, \"后勤部\"))); employees.put(1004, new Employee(1004,\"ct\",\"610510280@qq.com\",1,new Department(103, \"教研部\"))); employees.put(1005, new Employee(1005,\"na\",\"910510280@qq.com\",1,new Department(105, \"后勤部\"))); } // 主键自增 private static Integer initId = 1006; // 增加一个员工 public void save(Employee employee) { if (employee.getId() == null) { employee.setId(initId++); } employee.setDepartment(departmentDao.getDepartmentById(employee.getDepartment().getId())); employees.put(employee.getId(), employee); } // 查询全部员工信息 public Collection getAll() { return employees.values(); } // 通过id 查询员工 public Employee getEmployeeById(Integer id) { return employees.get(id); } // 删除员工通过ied public void delete(Integer id) { employees.remove(id); } } new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 21:14:19 "},"04_员工管理系统/21-SpringBoot-员工管理系统-首页实现.html":{"url":"04_员工管理系统/21-SpringBoot-员工管理系统-首页实现.html","title":"首页实现","keywords":"","body":"我们需要解决一些问题 就是这个静态资源无法导入 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 21:16:27 "},"04_员工管理系统/22-SpringBoot-员工管理系统-国际化.html":{"url":"04_员工管理系统/22-SpringBoot-员工管理系统-国际化.html","title":"国际化","keywords":"","body":" 首页配置: 注意点,所有页面的静态资源都需要使用Thymeleaf接管; @{} 页面国际化 注意点: 我们需要配置i18n文件 如果需要在项目中进行自动按钮自动切换,我们需要自定义一个国际化的组件 记得将自己写的组件配置到spring容器中@Bean {} new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"04_员工管理系统/23-SpringBoot-员工管理系统-登录功能实现.html":{"url":"04_员工管理系统/23-SpringBoot-员工管理系统-登录功能实现.html","title":"登录功能实现","keywords":"","body":"登录 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"04_员工管理系统/24-SpringBoot-员工管理系统-登录拦截器.html":{"url":"04_员工管理系统/24-SpringBoot-员工管理系统-登录拦截器.html","title":"登录拦截器","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"04_员工管理系统/25-SpringBoot-员工管理系统-展示员工列表.html":{"url":"04_员工管理系统/25-SpringBoot-员工管理系统-展示员工列表.html","title":"展示员工列表","keywords":"","body":" new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"04_员工管理系统/26-SpringBoot-员工管理系统-增加员工实现.html":{"url":"04_员工管理系统/26-SpringBoot-员工管理系统-增加员工实现.html","title":"增加员工实现","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"04_员工管理系统/27-SpringBoot-员工管理系统-修改员工信息.html":{"url":"04_员工管理系统/27-SpringBoot-员工管理系统-修改员工信息.html","title":"修改员工信息","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"04_员工管理系统/28-SpringBoot-员工管理系统-删除及404处理.html":{"url":"04_员工管理系统/28-SpringBoot-员工管理系统-删除及404处理.html","title":"删除及404处理","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/29-SpringBoot-聊聊该如何写一个网站.html":{"url":"05_回顾以及拓展/29-SpringBoot-聊聊该如何写一个网站.html","title":"聊聊该如何写一个网站","keywords":"","body":" 前端搞定: 页面长什么样子:数据 设计数据库 前端让他能够自动运行,独立化工程 数据接口如何对接:json,对象all in one! 前后端联调测试! 有一套自己熟悉的后台模板:工作必要! x-admin 前端页面:至少自己能够通过前端框架,组合出来一个网站页面 index about blog post user 让这个网站能够独立运行 1 个月 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"05_回顾以及拓展/30-SpringBoot-回顾这周安排.html":{"url":"05_回顾以及拓展/30-SpringBoot-回顾这周安排.html","title":"回顾这周安排","keywords":"","body":"上周回顾 SpringBoot 是什么? 微服务 Helloworld 探究源码~自动装配原理 配置yaml 多文档环境切换 web开发核心,静态资源映射 thymeleaf th:xxx SpringBoot 如何扩展MVC javaconfig CRUD 国际化 拦截器 定制首页 错误页 这周 JDBC MyBatis Druid Shiro:安全 SpringSecurity: 安全 重点 异步任务~,邮件发送,定时任务 Swagger Dubbo+Zookeeper new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"05_回顾以及拓展/31-SpringBoot-整合JDBC使用.html":{"url":"05_回顾以及拓展/31-SpringBoot-整合JDBC使用.html","title":"整合JDBC使用","keywords":"","body":"DataData Spring: bean 创建一个springboot项目,勾选数据库连接mysql驱动和jdbc new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"05_回顾以及拓展/32-SpringBoot-整合Druid数据源.html":{"url":"05_回顾以及拓展/32-SpringBoot-整合Druid数据源.html","title":"整合Druid数据源","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/33-SpringBoot-整合mybatis框架.html":{"url":"05_回顾以及拓展/33-SpringBoot-整合mybatis框架.html","title":"整合mybatis框架","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/34-SpringBoot-SpringSecurity环境搭建.html":{"url":"05_回顾以及拓展/34-SpringBoot-SpringSecurity环境搭建.html","title":"SpringSecurity环境搭建","keywords":"","body":"SpringSecurity(安全)SpringSecurity(安全) 在web开发中,安全第一位! 过滤器,拦截器! 功能性需求:否 做网站:安全应该在什么时候考虑? 设计之初 漏洞,隐私泄露~ 架构一旦确定~ shiro,SpringSecurity: 很像~ 除了类不一样,名字不一样; 认证,授权(vip1,vip2,vip3) 功能权限 访问权限 菜单权限 拦截器,过滤器:大量的原生的代~冗余 MVC-SPRING-SPRINGBOOT-框架思想 AOP:横切进去的 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"05_回顾以及拓展/35-SpringBoot-用户认证和授权.html":{"url":"05_回顾以及拓展/35-SpringBoot-用户认证和授权.html","title":"用户认证和授权","keywords":"","body":" new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"05_回顾以及拓展/36-SpringBoot-注销及权限控制.html":{"url":"05_回顾以及拓展/36-SpringBoot-注销及权限控制.html","title":"注销及权限控制","keywords":"","body":" csrf 在这里面是自动的帮我们开启的 new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "},"05_回顾以及拓展/37-SpringBoot-记住我及首页定制.html":{"url":"05_回顾以及拓展/37-SpringBoot-记住我及首页定制.html","title":"记住我及首页定制","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/38-SpringBoot-Shiro快速开始.html":{"url":"05_回顾以及拓展/38-SpringBoot-Shiro快速开始.html","title":"Shiro快速开始","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/39-SpringBoot-Shiro的subject分析.html":{"url":"05_回顾以及拓展/39-SpringBoot-Shiro的subject分析.html","title":"Shiro的subject分析","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/40-SpringBoot-SpringBoot整合Shiro环境搭建.html":{"url":"05_回顾以及拓展/40-SpringBoot-SpringBoot整合Shiro环境搭建.html","title":"SpringBoot整合Shiro环境搭建","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/41-SpringBoot-Shiro实现登录拦截.html":{"url":"05_回顾以及拓展/41-SpringBoot-Shiro实现登录拦截.html","title":"Shiro实现登录拦截","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/42-SpringBoot-Shiro实现用户登录.html":{"url":"05_回顾以及拓展/42-SpringBoot-Shiro实现用户登录.html","title":"Shiro实现用户登录","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/43-SpringBoot-Shiro整合mybatis.html":{"url":"05_回顾以及拓展/43-SpringBoot-Shiro整合mybatis.html","title":"Shiro整合mybatis","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/44-SpringBoot-Shiro请求授权实现.html":{"url":"05_回顾以及拓展/44-SpringBoot-Shiro请求授权实现.html","title":"Shiro请求授权实现","keywords":"","body":"new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-06 19:38:23 "},"05_回顾以及拓展/61-SpringBoot-聊聊现在和未来.html":{"url":"05_回顾以及拓展/61-SpringBoot-聊聊现在和未来.html","title":"聊聊现在和未来","keywords":"","body":"约定大于配置回顾以前,架构! 三层架构 + MVC 架构 --- > 解耦 开发框架 spring IOC AOP IOC: 控制反转 约泡: 泡温泉,泡茶....泡友 附近的人打招呼,加微信聊天,天天聊,--->还不一定能约到 浴场(容器): 温泉,茶庄,泡友 直接进温泉,就有人和你一起了! 原来我们都是自己一步步操作,现在交给容器了!我们需要什么就去拿就可以了 AOP: 面向切面编程(本质,动态代理) 为了解决什么? 不影响业务本来的情况下,实现动态增加功能,大量应用在日志,事务..等等方面 Spring是一个轻量级的Java开源框架,容器 目的: 解决企业开发的复杂性问题 Spring是春天, 万物复苏的季节,觉得他是春天,也十分复杂,配置文件有一大堆 SpringBoot SpringBoot并不是新东西,就是Spring的升级版! 新一代JavaEE开发标准,开箱即用!--> 拿过来就可以用! 它自动帮我们配置了非常多的东西,我们拿来即用! 特性: 约定大于配置! 随着公司体系越来越大,用户越来越多! 微服务架构---> 什么是微服务,新架构 模块化,功能化! 用户模块,支付模块,签到模块,娱乐模块...... 人过于多:一台服务器解决不了;在增加服务器! (横向解决问题) 假设A服务器占用98%,而B服务器只占用了10%.这样依旧不行. 万一A一爆,那不行 --- 负载均衡; 将原来的整体项目,分成模块化,用户就是单独的项目,签到也是一个单独的项目,项目和项目之间需要通信,如何通信? 用户非常多,而签到十分少! 给用户多一点服务器,给签到少一点儿服务器!(分布式) 约定大于配置 微服务架构问题? 分布式架构会遇到的四个核心问题? 1. 这么多服务,客户端如何去访问? 2. 这么多服务,服务之间如何进行通信? 3. 这么多服务,如何治理呢? zookeeper 4. 服务挂了,怎么办? (熔断机制 ) 解决方案: SpringCloud ,是一套生态,就是来解决以上分布式架构的四个问题 但是想使用SpringCloud,必须要掌握SpringBoot,因为SpringCloud是基于SpringBoot; Spring Cloud NetFlix,出来了一套解决方案 Api网关, zuul组件(客户端可以通过网关访问了) Feign ---> httpclient ---> HTTP的通信方式,同步并阻塞(服务之间就可以通讯了) 服务注册于发现,Eureka 服务熔断机制(服务挂了怎么办),Hystrix 2018年,年底,NetFlix宣布无限期停止维护.生态不再维护,就会脱节. 会造成新的安全问题,现在就被抛弃了很多,但是很多大公司还在用他们的机制 Apache Dubbo zookeeper,第二套解决系统 API:没有! 要么找第三方组件,要么自己实现. Dubbo:高性能的,基于Java实现的RPC通信框架! 服务注册与发现, zookeeper: 动物园管理者(Hadoop,Hive) 没有!熔断机制,借助了Hystrix的熔断机制 现在生态不完善,尤其是Dubbo. 当前的Dubbo3.0将提供具备当代特性(如响应性编程)的相关支持,同时吸取阿里内部HSF的设计长处来实现两者的融合,当前预览版的很多地方还在探讨中,希望大家能够积极反馈,我们都会虚心学习并参考. SpringCloud Alibaba 一站式解决方案! 他没有孵化的时候就有人在使用它了,就这四个字就很多人在用了 目前,又提出了一种方案: 服务网格: 下一代微服务标准! service mesh 代表解决方案: istio(未来可能需要掌握!) 万变不离其中 万变不离其中,一通百通!,(还是那4个问题) 1. API网关(服务路由) 2. HTTP,RPC框架,异步调用 3. 服务注册于发现(高可用问题) 4. 熔断机制,(服务降级) 如果,你们可用基于这4个问题,开发一套新的解决方案,也叫SpringCloud!微服务解决方案 为什么要解决这个问题?本质:网络是不可靠的! 程序猿,不要停下学习的脚步!!! 这是高级阶段...new Valine({el: \"#vcomments\",appId: 'CHjATxRcQrXst8eJrdwX0vjz-gzGzoHsz',appKey: 'nWerbwV2WMAxOEmAMkJKvXzs',placeholder: 'Just go go',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) victorfengming.gitee.io，使用署名4.0国际(CC BY 4.0)协议发布 all right reserved，powered by Gitbook最后更新： 2020-08-11 19:24:12 "}}